import requests
import logging
from typing import Optional, Dict, List
from app.core.interfaces import IWebSearch
from app.config import Config

logger = logging.getLogger(__name__)

from duckduckgo_search import DDGS
from typing import List, Dict
from datetime import datetime

class DuckDuckGoSearch(IWebSearch):
    def search(self, query: str) -> str:
        try:
            with DDGS() as ddgs:
                results = []
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
                dated_query = f"{query} {datetime.now().year}"
                for result in ddgs.text(dated_query, max_results=5):
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    result['retrieved_date'] = datetime.now().strftime("%Y-%m-%d %H:%M")
                    results.append(result)
                return self._format_results(results)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

    def _format_results(self, results: List[Dict]) -> str:
        formatted = []
        for item in results:
            date_info = f"üîπ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {item.get('retrieved_date', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}"
            formatted.append(
                f"üìå {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                f"{item.get('body', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"{date_info}\n"
                f"üåê {item.get('href', '#')}"
            )
        return "\n\n".join(formatted) if formatted else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

class GoogleSearch(IWebSearch):
    def __init__(self):
        self.api_key = Config.GOOGLE_API_KEY
        self.engine_id = Config.GOOGLE_ENGINE_ID
        self.base_url = "https://www.googleapis.com/customsearch/v1"

    def search(self, query: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Custom Search API"""
        try:
            params = {
                "key": self.api_key,
                "cx": self.engine_id,
                "q": query,
                "num": 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                "hl": "ru"  # –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            }
            
            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            return self._format_results(response.json())
            
        except Exception as e:
            logger.error(f"Google Search error: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

    def _format_results(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        items = data.get("items", [])
        if not items:
            return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        formatted = []
        for item in items:
            title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            snippet = item.get("snippet", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            link = item.get("link", "#")
            formatted.append(f"üîç {title}\n{snippet}\nüåê {link}")
        
        return "\n\n".join(formatted)